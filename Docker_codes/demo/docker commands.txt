# docker run -dit debian
d detach
i interactive
t associates a t terminal
# docker ps
status
# docker stop 433c
# docker stop cranky_chatterjee
stop the container

##### next how NOT to run a debian container #####
# docker run debian

# docker run -d -i -t debian

what docker downloaded into the computer
# docker images

inspect docker images
# docker inspect 9c7a54a9a43c

[
    {
        "Id": "sha256:9c7a54a9a43cca047013b82af109fe963fde787f63f9e016fdc3384500c2823d",
        "RepoTags": [
            "hello-world:latest"
        ],
        "RepoDigests": [
            "hello-world@sha256:fc6cf906cbfa013e80938cdf0bb199fbdbb86d6e3e013783e5a766f50f5dbce0"
        ],
        "Parent": "",
        "Comment": "",
        "Created": "2023-05-04T17:37:03.872958712Z",
        "Container": "347ca68872ee924c4f9394b195dcadaf591d387a45d624225251efc6cb7a348e",
        "ContainerConfig": {
            "Hostname": "347ca68872ee",
            "Domainname": "",
            "User": "",
            "AttachStdin": false,
            "AttachStdout": false,
            "AttachStderr": false,
            "Tty": false,
            "OpenStdin": false,
            "StdinOnce": false,
            "Env": [
                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
            ],
            "Cmd": [
                "/bin/sh",
                "-c",
                "#(nop) ",
                "CMD [\"/hello\"]"
            ],
            "Image": "sha256:62a15619037f3c4fb4e6ba9bd224cba3540e393a55dc52f6bebe212ca7b5e1a7",
            "Volumes": null,
            "WorkingDir": "",
            "Entrypoint": null,
            "OnBuild": null,
            "Labels": {}
        },
        "DockerVersion": "20.10.23",
        "Author": "",
        "Config": {
            "Hostname": "",
            "Domainname": "",
            "User": "",
            "AttachStdin": false,
            "AttachStdout": false,
            "AttachStderr": false,
            "Tty": false,
            "OpenStdin": false,
            "StdinOnce": false,
            "Env": [
                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
            ],
            "Cmd": [
                "/hello"
            ],
            "Image": "sha256:62a15619037f3c4fb4e6ba9bd224cba3540e393a55dc52f6bebe212ca7b5e1a7",
            "Volumes": null,
            "WorkingDir": "",
            "Entrypoint": null,
            "OnBuild": null,
            "Labels": null
        },
        "Architecture": "amd64",
        "Os": "linux",
        "Size": 13256,
        "VirtualSize": 13256,
        "GraphDriver": {
            "Data": {
                "MergedDir": "/var/lib/docker/overlay2/c4d2c5f7a705e686d55211502da362dc0d7f5eb0893ee8c6f330147e90f1b7d4/merged",
                "UpperDir": "/var/lib/docker/overlay2/c4d2c5f7a705e686d55211502da362dc0d7f5eb0893ee8c6f330147e90f1b7d4/diff",
                "WorkDir": "/var/lib/docker/overlay2/c4d2c5f7a705e686d55211502da362dc0d7f5eb0893ee8c6f330147e90f1b7d4/work"
            },
            "Name": "overlay2"
        },
        "RootFS": {
            "Type": "layers",
            "Layers": [
                "sha256:01bb4fce3eb1b56b05adf99504dafd31907a5aadac736e36b27595c8b92f07f1"
            ]
        },
        "Metadata": {
            "LastTagTime": "0001-01-01T00:00:00Z"
        }
    }
] 

help

# docker prune --help

Managing container Images

layers presented in an image

# docker pull nginxiner based on the image

# docker history nginx
 


downloading an image without creating a container based on the image

# docker history nginx

# docker images --no-trunc

tag an image

docker tag nginx:latest nginx:my_blog_stable
# created an alias

build an image
# docker build -t my_nginx . # important punctl la sfarsit, -t specify a tag

run it as a container

# docker run -dit my_nginx

view history of the image
# docker history my_nginx

remove an image
# docker rmi nginx:my_blog_stable

remove dangling images
# docker image prune

great care when using following:
 # docker system prune -a

# docker system df
disk space docker is using

# exercises_1

in order to download, or “pull”, the “jenkins” container image, use the following command:
docker pull jenkins/jenkins:lts

Download the "2-alpine" version of this image instead of the default “latest” image:
docker pull httpd:2-alpine

This image is actually called “httpd.” You can determine the
name of the image by searching for on the command line with "docker search TERM" or by
searching on https://hub.docker.com.

# docker search TERM | grep apache

visit this page on Docker Hub to get a working tag:
https://hub.docker.com/_/httpd?tab=tags

Check the images are present
Let’s list the two images that we downloaded:

# docker images

Check to see how much disk space all of images combined are using.
# docker system df

Now delete each of the two images.
To delete Jenkins use this command:

# docker rmi jenkins/jenkins

For Apache we have to declare the tag explicitly or the “rmi” command won’t work.
# docker rmi httpd:2-alpine

# docker images

# END exercises_1

***** Running containers *****

start a container and keep it Running
that's we need to start a container and detach it to keep it running in the backgroud

# docker run -dit debian

run a container but attching a name

# docker run -dit --name web debian

# docker ps -a # all containers/ running container without (a)

# docker ps -l # show latest container started

stop container

# docker stop web ("exited")

remove a stoped container
 # docker rm web

 start a stoped container
 # docker start web

!!! container to start automatically if machines restarts
# docker run -dit --restart=always --name=4th_container debian

docker inspect
# docker inspect 4th_container | grep -A3 RestartPolicy

# docker kill 3rd_container 

# docker run --rm hello-world
computer started the container ,ran and when finished docker removed the computer

# docker logs -f container
# docker logs -tf container

### Exercise
#docker run -dit redis

Check to see if it is running:

 # docker ps

 Start a Container With a Name
# docker run -dit --name redis_container redis

# docker ps
Stop a Named Container

# docker stop redis_container

# docker ps

Automatically deleting a stopped container

# docker run --rm hello-world

#  docker ps -a

Now run a container using the hello-world image without the “--rm” option

# docker run hello-world

# docker pa -a

Logs


# docker logs CONTAINER_NAME


Create a container using the “hello-world” image:

# docker run --name test_container -d hello-world

# docker ps -a

# docker logs test_container

END exercises_2

Make an application running in a container accessible outside the docker host machine

# docker run --name our_nginx -d -p 8080:80 nginx
# docker ps

0.0.0.0:8080->80/tcp

# curl http://localhost:8080

<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
html { color-scheme: light dark; }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>

 on chrome type http://localhost:8080
 get a page - welcome to nginx

# docker logs our_nginx

/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration
/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/
/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh
10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf
10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf
/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh
/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh
/docker-entrypoint.sh: Configuration complete; ready for start up
2023/05/19 13:50:37 [notice] 1#1: using the "epoll" event method
2023/05/19 13:50:37 [notice] 1#1: nginx/1.23.4
2023/05/19 13:50:37 [notice] 1#1: built by gcc 10.2.1 20210110 (Debian 10.2.1-6) 
2023/05/19 13:50:37 [notice] 1#1: OS: Linux 5.19.0-41-generic
2023/05/19 13:50:37 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:1048576
2023/05/19 13:50:37 [notice] 1#1: start worker processes
2023/05/19 13:50:37 [notice] 1#1: start worker process 29
2023/05/19 13:50:37 [notice] 1#1: start worker process 30
2023/05/19 13:50:37 [notice] 1#1: start worker process 31
2023/05/19 13:50:37 [notice] 1#1: start worker process 32
2023/05/19 13:50:37 [notice] 1#1: start worker process 33
2023/05/19 13:50:37 [notice] 1#1: start worker process 34
2023/05/19 13:50:37 [notice] 1#1: start worker process 35
2023/05/19 13:50:37 [notice] 1#1: start worker process 36
2023/05/19 13:50:37 [notice] 1#1: start worker process 37
2023/05/19 13:50:37 [notice] 1#1: start worker process 38
2023/05/19 13:50:37 [notice] 1#1: start worker process 39
2023/05/19 13:50:37 [notice] 1#1: start worker process 40
172.17.0.1 - - [19/May/2023:13:54:11 +0000] "GET / HTTP/1.1" 200 615 "-" "curl/7.81.0" "-"
172.17.0.1 - - [19/May/2023:13:55:09 +0000] "GET / HTTP/1.1" 200 615 "-" "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/113.0" "-"
2023/05/19 13:55:09 [error] 30#30: *2 open() "/usr/share/nginx/html/favicon.ico" failed (2: No such file or directory), client: 172.17.0.1, server: localhost, request: "GET /favicon.ico HTTP/1.1", host: "localhost:8080", referrer: "http://localhost:8080/"
172.17.0.1 - - [19/May/2023:13:55:09 +0000] "GET /favicon.ico HTTP/1.1" 404 153 "http://localhost:8080/" "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/113.0" "-"

# docker run -p 8080:80 --name another_nginx -v ${PWD}/webpages:/usr/share/nginx/html:ro -d nginx
 bash command ${PWD}
 -v creates a volume for sharing files
 :ro read only mode, mounts the volume in read only mode
 container can read only the data from folder

 # curl http://localhost:8080
 Hi from inside the container
refresh host - get the message above

END

Entering containers
start a container + access via shell

# docker run -it --name apache httpd /bin/bash
we are now into the container
# pdw 
# ls
let's exit the container
# exit

# docker ps
empty because we did not supply -d detach

create again with -d option
working but detached
sometime bin/bash not availble

start another httpd container

# docker run -dit httpd

# docker ps

to provide a terminal to the container:
# docker exec -it container_id /bin/bash

root@e098c4e5e339:/usr/local/apache2# we get access